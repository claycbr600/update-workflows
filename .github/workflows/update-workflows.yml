name: Update Workflows

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Dump GitHub context
        run: echo '${{ toJSON(github) }}'

      - name: Set date
        id: date
        run: |
          date=$(date +%Y.%m.%d)
          echo "::set-output name=today::$date"

      - name: Get tag version
        uses: actions/github-script@v5
        id: tag-version
        with:
          result-encoding: string
          script: |
            const resp = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/${{ steps.date.outputs.today }}"
            })
            if (resp.data.length == 0) {
              return "${{ steps.date.outputs.today }}.1"
            } else {
              let items = resp.data.map(item => item.ref.replace("refs/tags/", ""))
              let current_tag = items.sort().pop()
              let patch = current_tag.split('.').pop()
              return `${{ steps.date.outputs.today }}.${++patch}`
            }

      - name: Response output
        run: echo data = '${{ steps.tag-version.outputs.result }}'

      - name: Get latest release
        uses: actions/github-script@v5
        id: release
        with:
          script: |
            let resp = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            let tag_name = resp.data.tag_name
            resp = await github.rest.git.getTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_sha: tag_name
            })
            # resp = await github.rest.repos.listCommits({
            #   owner: context.repo.owner,
            #   repo: context.repo.repo,
            #   sha: tag_name
            # })
            return resp.data

      - name: Release output
        run: echo data = '${{ toJSON(steps.release.outputs.result) }}'
